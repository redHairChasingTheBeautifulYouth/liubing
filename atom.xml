<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Trevor Feng</title>
  
  <subtitle>So,RELAX</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-23T13:39:25.317Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Trevor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大数据量分页查询优化</title>
    <link href="http://yoursite.com/2019/07/23/mysql%E5%8D%95%E8%A1%A8%E5%8E%86%E5%8F%B2%E8%A1%A8%E6%95%B0%E6%8D%AE%E9%87%8F%E5%BE%88%E5%A4%A7%EF%BC%8C%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/07/23/mysql单表历史表数据量很大，分页查询优化/</id>
    <published>2019-07-23T13:39:30.709Z</published>
    <updated>2019-07-23T13:39:25.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在公司的历史数据表中，数据量很大，上了百万级别。使用常规的分页查询，不能达到理想的效果，今天在公司测试时，测试结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from cust_order</span><br></pre></td></tr></table></figure><ul><li>数据量：3000000以上</li><li>花费时间：6845ms</li></ul><h3 id="常规分页查询测试"><a href="#常规分页查询测试" class="headerlink" title="常规分页查询测试"></a>常规分页查询测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from cust_order where order_type=5 limit 50000,100</span><br></pre></td></tr></table></figure><p>默认按主键id排序，且id为自增</p><h5 id="记录行的偏移量为50000"><a href="#记录行的偏移量为50000" class="headerlink" title="记录行的偏移量为50000"></a>记录行的偏移量为50000</h5><ul><li>花费时间2786ms</li></ul><h5 id="记录行的偏移量为500000"><a href="#记录行的偏移量为500000" class="headerlink" title="记录行的偏移量为500000"></a>记录行的偏移量为500000</h5><ul><li>花费时间5980ms</li></ul><h5 id="记录行的偏移量为2000000"><a href="#记录行的偏移量为2000000" class="headerlink" title="记录行的偏移量为2000000"></a>记录行的偏移量为2000000</h5><ul><li>花费时间15560ms</li></ul><h5 id="结论：常规分页查询默认从第一行开始扫描，偏移量越大，查询数据越慢"><a href="#结论：常规分页查询默认从第一行开始扫描，偏移量越大，查询数据越慢" class="headerlink" title="结论：常规分页查询默认从第一行开始扫描，偏移量越大，查询数据越慢"></a>结论：常规分页查询默认从第一行开始扫描，偏移量越大，查询数据越慢</h5><h3 id="限定id的起始值优化"><a href="#限定id的起始值优化" class="headerlink" title="限定id的起始值优化"></a>限定id的起始值优化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from cust_order where order_type=5 and id&gt;=500000 limit 100</span><br></pre></td></tr></table></figure><ul><li>花费时间11ms</li></ul><h3 id="思考：假如id不是连续自增，如数据有缺失，how-to-do，待更新"><a href="#思考：假如id不是连续自增，如数据有缺失，how-to-do，待更新" class="headerlink" title="思考：假如id不是连续自增，如数据有缺失，how to do，待更新"></a>思考：假如id不是连续自增，如数据有缺失，how to do，待更新</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在公司的历史数据表中，数据量很大，上了百万级别。使用常规的分页查询，不能达到理想的效果，今天在公司测试时，测试结果如下&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>类加载机制</title>
    <link href="http://yoursite.com/2019/07/14/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/07/14/类加载机制/</id>
    <published>2019-07-14T15:29:27.927Z</published>
    <updated>2019-07-14T15:33:46.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JVM类加载机制分为五个部分"><a href="#JVM类加载机制分为五个部分" class="headerlink" title="JVM类加载机制分为五个部分"></a>JVM类加载机制分为五个部分</h3><ul><li>加载</li><li>验证</li><li>准备</li><li>解析</li><li>初始化</li></ul><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的入口</p><ul><li>从一个Class文件获取</li><li>以从ZIP包中读取（比如从jar包和war包中读取）</li><li>在运行时计算生成（动态代理）</li><li>其它文件生成（比如将JSP文件转换成对应的Class类）</li></ul><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>类变量分配内存并设置类变量的初始值阶段,即在方法区中分配这些变量所使用的内存空间<br>如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#将a初始值赋值0</span><br><span class="line">static int a = 999;</span><br><span class="line">#将b赋值为1000</span><br><span class="line">static final int b = 1000;</span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是class文件中的：</p><ul><li>CONSTANT_Class_info</li><li>CONSTANT_Field_info</li><li>CONSTANT_Method_info</li></ul><p>等类型的常量(不属于本类)。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由JVM主导。到了初始阶段，才开始真正执行类中定义的Java程序代码。</p><p>初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。p.s: 如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。</client></client></client></client></client></p><p>注意以下几种情况不会执行类初始化：</p><ul><li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li><li>定义对象数组，不会触发该类的初始化。</li><li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</li><li>通过类名获取Class对象，不会触发类的初始化。</li><li>通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初- - 始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</li><li>通过ClassLoader默认的loadClass方法，也不会触发初始化动作。</li></ul><hr><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>虚拟机设计团队把加载动作放到JVM外部实现，以便让应用程序决定如何获取所需的类，JVM提供了3种类加载器：</p><ul><li>启动类加载器(Bootstrap ClassLoader)：负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。</li><li>扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\lib\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li><li>应用程序类加载器(Application ClassLoader)：负责加载用户路径（classpath）上的类库。</li></ul><p>JVM通过双亲委派模型进行类的加载，当然我们也可以通过继承java.lang.ClassLoader实现自定义的类加载器<br><img src="https://note.youdao.com/yws/public/resource/548599a687fdd90f7974279a1fb3ec03/xmlnote/B31FB777AA1B475E9131A733E08EBC30/9201" alt="image"></p><p>当一个类加载器收到类加载任务，会先交给其父类加载器去完成，因此最终加载任务都会传递到顶层的启动类加载器，只有当父类加载器无法完成加载任务时，才会尝试执行加载任务。</p><p>采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。</p><p>在有些情境中可能会出现要我们自己来实现一个类加载器的需求，由于这里涉及的内容比较广泛，我想以后单独写一篇文章来讲述，不过这里我们还是稍微来看一下。我们直接看一下jdk中的ClassLoader的源码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">protected synchronized Class&lt;?&gt; loadClass(String name, boolean resolve)</span><br><span class="line">        throws ClassNotFoundException &#123;</span><br><span class="line">    // First, check if the class has already been loaded</span><br><span class="line">    Class c = findLoadedClass(name);</span><br><span class="line">    if (c == null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (parent != null) &#123;</span><br><span class="line">                c = parent.loadClass(name, false);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                c = findBootstrapClass0(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            // If still not found, then invoke findClass in order</span><br><span class="line">            // to find the class.</span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (resolve) &#123;</span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先通过Class c = findLoadedClass(name);判断一个类是否已经被加载过。</li><li>如果没有被加载过执行if(c==null)中的程序，遵循双亲委派的模型，首先会通过递归从父加载器开始找，直到父类加载器是Bootstrap ClassLoader为止。</li><li>最后根据resolve的值，判断这个class是否需要解析</li></ul><p>而上面的findClass()的实现如下，直接抛出一个异常，并且方法是protected，很明显这是留给我们开发者自己去实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line">    throw new ClassNotFoundException(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p>Java之所以出现这条机制，因为是处于安全性考虑。害怕用户自己定义class文件然后自己写一个类加载器来加载原本应该是JVM自己加载的类</p><p>一般自定义的Class Loader可以从java.lang.ClassLoader继承，不同classloader加载相同的类，他们在内存也不是相等的，即它们不能互相转换，会直接抛异常</p><p>JVM默认是双亲委托加载机制，即首先判断缓存是否有已加载的类，如果缓存没有，但存在父加载器，则让父加载器加载，如果不存在父加载器，则让Bootstrap ClassLoader去加载，如果父类加载失败，则调用本地的findClass方法去加载。（注：如果不想破坏双亲委托机制的类加载方式，自定义的classloader应该重写findClass(name)，而不是直接重写loadClass）</p><p>各个ClassLoader加载相同的类后，他们是不互等的，这个当涉及多个ClassLoader，并且有通过当前线程上线文获取ClassLoader后转换特别需要注意，可以通过线程的setContextClassLoader设置一个ClassLoader线程上下文，然后再通过Thread.currentThread().getContextClassLoader()获取当前线程保存的Classloader。但是自定义的类文件，放到Bootstrap<br> ClassLoader加载目录，是不会被Bootstrap ClassLoader加载的，因为作为启动类加载器，它不会加载自己不熟悉的jar包的，并且类文件必须打包成jar包放到加载器加载的根目录，才可能被扩展类加载器所加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">public class TestClassLoader extends ClassLoader &#123;</span><br><span class="line"></span><br><span class="line">//定义文件所在目录</span><br><span class="line"></span><br><span class="line">    private static final String DEAFAULTDIR=&quot;E:\\MyProjects\\workspace\\TestConsole\\bin\\&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        byte[] b = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">             b = loadClassData(GetClassName(name));</span><br><span class="line"></span><br><span class="line">        &#125;catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return defineClass(name, b, 0, b.length);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"></span><br><span class="line">protected synchronized Class&lt;?&gt; loadClass(String name,boolean resolve) throws ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">if(name.startsWith(&quot;java.&quot;))&#123;try</span><br><span class="line"> &#123;</span><br><span class="line">            return</span><br><span class="line">super.loadClass(name,</span><br><span class="line">false);    </span><br><span class="line">        &#125;</span><br><span class="line">catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();  </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">byte[] b =</span><br><span class="line">null;  </span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">try &#123;  </span><br><span class="line"></span><br><span class="line">           b = loadClassData(GetClassName(name));  </span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">catch (Exception e) &#123;  </span><br><span class="line"></span><br><span class="line">           e.printStackTrace();  </span><br><span class="line"></span><br><span class="line">       &#125; </span><br><span class="line">      </span><br><span class="line">return defineClass(name, b, 0, b.length);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">private</span><br><span class="line">byte[] loadClassData(String filepath)</span><br><span class="line">throws Exception &#123;  </span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">int n =0;  </span><br><span class="line"></span><br><span class="line">        BufferedInputStream br =</span><br><span class="line">new BufferedInputStream(  </span><br><span class="line"></span><br><span class="line">                       </span><br><span class="line">new FileInputStream(  </span><br><span class="line"></span><br><span class="line">                   </span><br><span class="line">new File(filepath)));  </span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos=</span><br><span class="line">new ByteArrayOutputStream();  </span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">while((n=br.read())!=-1)&#123;  </span><br><span class="line"></span><br><span class="line">                bos.write(n);  </span><br><span class="line"></span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            br.close();  </span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">return bos.toByteArray();  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">public</span><br><span class="line">static String GetClassName(String name)&#123;</span><br><span class="line">       </span><br><span class="line">return</span><br><span class="line">DEAFAULTDIR+name.replace(&apos;.&apos;,&apos;/&apos;)+&quot;.class&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JVM类加载机制分为五个部分&quot;&gt;&lt;a href=&quot;#JVM类加载机制分为五个部分&quot; class=&quot;headerlink&quot; title=&quot;JVM类加载机制分为五个部分&quot;&gt;&lt;/a&gt;JVM类加载机制分为五个部分&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;加载&lt;/li&gt;
&lt;li&gt;验证&lt;/
      
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
  </entry>
  
</feed>
