<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Trevor Feng</title>
  
  <subtitle>So,RELAX</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-26T13:24:09.586Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Trevor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis事务</title>
    <link href="http://yoursite.com/2019/07/26/redis%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/07/26/redis事务/</id>
    <published>2019-07-26T13:25:04.810Z</published>
    <updated>2019-07-26T13:24:09.586Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set baidu liyanhong</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set baidu yanhonghuoshui</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get baidu</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr baidu</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set baidu shaibi</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) &quot;yanhonghuoshui&quot;</span><br><span class="line">3) (error) ERR value is not an integer or out of range</span><br><span class="line">4) OK</span><br><span class="line">127.0.0.1:6379&gt; get baidu</span><br><span class="line">&quot;shaibi&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><ul><li>使用multi开启一个事务</li><li>中间的指令存入存入服务器的队列</li><li>exec执行队列</li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>事务不是原子性的，也就是某条指令失败与否，其他指令也会执行，不是一个指令失败，全部回滚</li><li>redis的事务仅仅是隔离性，当前事务有着不被其他事务打断的权利</li></ul><h3 id="discard丢弃队列中的指令"><a href="#discard丢弃队列中的指令" class="headerlink" title="discard丢弃队列中的指令"></a>discard丢弃队列中的指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set mayun cuiniubi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set mayun niubi</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get mayun</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mayun</span><br><span class="line">&quot;cuiniubi&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="批量入队指令"><a href="#批量入队指令" class="headerlink" title="批量入队指令"></a>批量入队指令</h3><p>如果一个事务中的指令过多，需要的网络IO 时间增加，所以redis客户端使用事务一般结合pipeline一起使用，将全部的指令压缩成一次IO操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>redis基础数据结构</title>
    <link href="http://yoursite.com/2019/07/25/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2019/07/25/redis基础数据结构/</id>
    <published>2019-07-25T14:11:08.621Z</published>
    <updated>2019-07-25T14:11:00.618Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>redis采用key-value的存储方式，key是唯一键，唯一的变化在value部分</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>redis的字符串是动态字符串</p><ul><li>结构类似java的ArrayList</li><li>采用预分配空间来减少空间的频繁分配</li><li>当字符串长度小于1M，每次扩容空间翻倍</li><li>当大于1M，每次扩容增加1M</li><li>最大长度512M</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set test test</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">&quot;test&quot;</span><br><span class="line">127.0.0.1:6379&gt; exists test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; del test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h5 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set test1 test1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set test2 test2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget test1 test2</span><br><span class="line">1) &quot;test1&quot;</span><br><span class="line">2) &quot;test2&quot;</span><br><span class="line">127.0.0.1:6379&gt; mset test3 test3 test4 test4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget test3 test4</span><br><span class="line">1) &quot;test3&quot;</span><br><span class="line">2) &quot;test4&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h5 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h5><p>简单测试过期时间，后期讨论</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set test mytest</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">&quot;mytest&quot;</span><br><span class="line">127.0.0.1:6379&gt; expire test 5</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">&quot;mytest&quot;</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; setex test 5 mytest</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">&quot;mytest&quot;</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h5 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h5><p>如果value是一个整数，可以对他进行整型加减</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set age 12</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;12&quot;</span><br><span class="line">127.0.0.1:6379&gt; incr age</span><br><span class="line">(integer) 13</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;13&quot;</span><br><span class="line">127.0.0.1:6379&gt; incrby age</span><br><span class="line">(error) ERR wrong number of arguments for &apos;incrby&apos; command</span><br><span class="line">127.0.0.1:6379&gt; incrby age 2</span><br><span class="line">(integer) 15</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;15&quot;</span><br><span class="line">127.0.0.1:6379&gt; incrby age -10</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><ul><li>结构上类似java的linkedList</li><li>插入和删除的速度很快，时间复杂度O(1)</li><li>得到某个位置的值速度很慢，需要遍历</li></ul><h5 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h5><p>右边进左边出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush xiaoliu name sex age</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; llen xiaoliu</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lpop xiaoliu</span><br><span class="line">&quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop xiaoliu</span><br><span class="line">&quot;sex&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop xiaoliu</span><br><span class="line">&quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><p>右边进右边出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush xiaoliu sex age name</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; llen xiaoliu</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; rpop xiaoliu</span><br><span class="line">&quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop xiaoliu</span><br><span class="line">&quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop xiaoliu</span><br><span class="line">&quot;sex&quot;</span><br></pre></td></tr></table></figure><h5 id="定位list中的值"><a href="#定位list中的值" class="headerlink" title="定位list中的值"></a>定位list中的值</h5><p>索引从0开始,时间复杂度为0(n)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush xiaoliu name age sex class score</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lindex xiaoliu 1</span><br><span class="line">&quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt; lindex xiaoliu 0</span><br><span class="line">&quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange 0 -1</span><br><span class="line">(error) ERR wrong number of arguments for &apos;lrange&apos; command</span><br><span class="line">127.0.0.1:6379&gt; lrange xiaoliu 0 -1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">3) &quot;sex&quot;</span><br><span class="line">4) &quot;class&quot;</span><br><span class="line">5) &quot;score&quot;</span><br><span class="line">127.0.0.1:6379&gt; ltrim xiaoliu 0 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange xiaoliu 0 -1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">3) &quot;sex&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h5 id="底层存储讨论"><a href="#底层存储讨论" class="headerlink" title="底层存储讨论"></a>底层存储讨论</h5><ul><li>在列表元素较少时，采用连续内存存储，用ziplist存储（压缩列表），将所有的元素紧挨着存储</li><li>在数量较多时，使用quicklist。也就是将多个ziplist用双向指针连起来，类似与单个ziplist采用连续内存存储，但同时每个ziplist都有指向上一个或者下一个ziplist的指针元素</li><li>这样做的目的是为了普通链表需要附加指针的空间较大，并且会加重内存的碎片化</li></ul><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><ul><li>相当于java的hashMap</li><li>redis的字典的值只能是string</li><li>rehash的方式不一样，java的rehash的操作很耗时</li><li>采用渐进式rehash策略</li></ul><p>渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user name &quot;xiaoming&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user age 23</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;xiaoming&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;23&quot;</span><br><span class="line">127.0.0.1:6379&gt; hlen user</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; hget user name</span><br><span class="line">&quot;xiaoming&quot;</span><br><span class="line">127.0.0.1:6379&gt; hset user name xiaowang</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; hget user name</span><br><span class="line">&quot;xiaowang&quot;</span><br><span class="line">127.0.0.1:6379&gt; hmset user1 name xiaozhang age 12</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是 hincrby，和 incr 使用基本一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset user1 name xiaozhang age 12</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hincrby user1 age 2</span><br><span class="line">(integer) 14</span><br><span class="line">127.0.0.1:6379&gt; hget user1 name</span><br><span class="line">&quot;xiaozhang&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget user1 age</span><br><span class="line">&quot;14&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul><li>相当于java里的hashSet</li><li>字典中所有的value都是null</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd user2 xiaowang</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd user2 xiaoming</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd user2 xiaowang</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; smembers user2</span><br><span class="line">1) &quot;xiaoming&quot;</span><br><span class="line">2) &quot;xiaowang&quot;</span><br><span class="line">127.0.0.1:6379&gt; sismember user2 xiaozhang</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; sismember user2 xiaowang</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; scard user2</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; smembers user2</span><br><span class="line">1) &quot;xiaoming&quot;</span><br><span class="line">2) &quot;xiaowang&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop user2</span><br><span class="line">&quot;xiaowang&quot;</span><br><span class="line">127.0.0.1:6379&gt; smembers user2</span><br><span class="line">1) &quot;xiaoming&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><ul><li>是一个set</li><li>给每一个value赋予score。代表这个value的排序权重</li><li>用跳跃列表实现</li></ul><p>zset可以存微博大v的粉丝，value是id，score是关注的时间，则可以对粉丝列表按关注的时间排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; zadd books 9.0 &quot;think in java&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zadd books 8.9 &quot;java concurrency&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zadd books 8.6 &quot;java cookbook&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zrange books 0 -1  # 按 score 排序列出，参数区间为排名范围</span><br><span class="line">1) &quot;java cookbook&quot;</span><br><span class="line">2) &quot;java concurrency&quot;</span><br><span class="line">3) &quot;think in java&quot;</span><br><span class="line">&gt; zrevrange books 0 -1  # 按 score 逆序列出，参数区间为排名范围</span><br><span class="line">1) &quot;think in java&quot;</span><br><span class="line">2) &quot;java concurrency&quot;</span><br><span class="line">3) &quot;java cookbook&quot;</span><br><span class="line">&gt; zcard books  # 相当于 count()</span><br><span class="line">(integer) 3</span><br><span class="line">&gt; zscore books &quot;java concurrency&quot;  # 获取指定 value 的 score</span><br><span class="line">&quot;8.9000000000000004&quot;  # 内部 score 使用 double 类型进行存储，所以存在小数点精度问题</span><br><span class="line">&gt; zrank books &quot;java concurrency&quot;  # 排名</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zrangebyscore books 0 8.91  # 根据分值区间遍历 zset</span><br><span class="line">1) &quot;java cookbook&quot;</span><br><span class="line">2) &quot;java concurrency&quot;</span><br><span class="line">&gt; zrangebyscore books -inf 8.91 withscores # 根据分值区间 (-∞, 8.91] 遍历 zset，同时返回分值。inf 代表 infinite，无穷大的意思。</span><br><span class="line">1) &quot;java cookbook&quot;</span><br><span class="line">2) &quot;8.5999999999999996&quot;</span><br><span class="line">3) &quot;java concurrency&quot;</span><br><span class="line">4) &quot;8.9000000000000004&quot;</span><br><span class="line">&gt; zrem books &quot;java concurrency&quot;  # 删除 value</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zrange books 0 -1</span><br><span class="line">1) &quot;java cookbook&quot;</span><br><span class="line">2) &quot;think in java&quot;</span><br></pre></td></tr></table></figure><h3 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h3><p>可以对redis中键设置过期时间，过期了就找不到了</p><ul><li>是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失</li></ul><p><a href="https://stackoverflow.com/questions/16375188/redis-strings-vs-redis-hashes-to-represent-json-efficiency" target="_blank" rel="noopener">存储对象用字符串还是hash</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h3&gt;&lt;p&gt;redis采用key-value的存储方式，key是唯一键，唯一的变化在value部分&lt;/p&gt;
&lt;h3 id=&quot;string
      
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>redis scan命令代替keys命令</title>
    <link href="http://yoursite.com/2019/07/25/redis%20scan%E5%91%BD%E4%BB%A4%E4%BB%A3%E6%9B%BFkeys%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/07/25/redis scan命令代替keys命令/</id>
    <published>2019-07-25T14:11:07.078Z</published>
    <updated>2019-07-25T14:10:32.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="keys命令"><a href="#keys命令" class="headerlink" title="keys命令"></a>keys命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set aa aa</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set ab ab</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set ac ac</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys a*</span><br><span class="line">1) &quot;ab&quot;</span><br><span class="line">2) &quot;aa&quot;</span><br><span class="line">3) &quot;ac&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><ul><li>没有offset，limit参数，一次性吐出所有符合条件的key，假如有10万个呢</li><li>keys是遍历算法，时间复杂度O(n),假如有10万个key，当前redis会被堵塞</li></ul><h3 id="scan命令"><a href="#scan命令" class="headerlink" title="scan命令"></a>scan命令</h3><p>redis在2.8版本中引入了scan命令</p><ul><li>复杂度也是O(n),但通过游标分步进行，不会堵塞线程</li><li>提供模糊匹配功能</li><li>服务器不需要为游标保存状态，游标的唯一状态就是 scan 返回给客户端的游标整数;</li><li>返回的结果有重复，需要客户端去重</li><li>遍历的过程中如果有数据修改，改动后的数据能不能遍历到是不确定的;</li><li>单次返回的结果是空的并不意味着遍历结束，而要看返回的游标值是否为零;</li></ul><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>语法为：SCAN cursor MATCH pattern COUNT count</p><ul><li>cursor 游标</li><li>pattern 匹配的表达式，如：name*</li><li>count要查找的数量</li></ul><p>scan命令</p><ul><li>SCAN命令的有SCAN,SSCAN,HSCAN,ZSCAN</li><li>SCAN的话就是遍历所有的keys</li><li>其他的SCAN命令的话是SCAN选中的集合</li><li>SCAN命令返回的是一个游标，从0开始遍历，到0结束遍历</li></ul><p>假如有10000个key，key分别为key1，key2，一直到key10000</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scan 0 match key24* count 1000</span><br><span class="line">1) &quot;1688&quot;</span><br><span class="line">2) 1) &quot;key2411&quot;</span><br><span class="line"> 2) &quot;key2475&quot;</span><br><span class="line"> 3) &quot;key2494&quot;</span><br><span class="line"> 4) &quot;key2406&quot;</span><br><span class="line"> 5) &quot;key2478&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 1688 match key24* count 1000</span><br><span class="line">1) &quot;2444&quot;</span><br><span class="line">2) 1) &quot;key2458&quot;</span><br><span class="line"> 2) &quot;key249&quot;</span><br><span class="line"> 3) &quot;key2407&quot;</span><br><span class="line"> 4) &quot;key2434&quot;</span><br><span class="line"> 5) &quot;key241&quot;</span><br><span class="line"> 6) &quot;key2497&quot;</span><br><span class="line"> 7) &quot;key2435&quot;</span><br><span class="line"> 8) &quot;key2413&quot;</span><br><span class="line"> 9) &quot;key2421&quot;</span><br><span class="line"> 10) &quot;key248&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 2444 match key24* count 1000</span><br><span class="line">1) &quot;818&quot;</span><br><span class="line">2) 1) &quot;key2459&quot;</span><br><span class="line"> 2) &quot;key2462&quot;</span><br><span class="line"> 3) &quot;key2409&quot;</span><br><span class="line"> 4) &quot;key2454&quot;</span><br><span class="line"> 5) &quot;key2431&quot;</span><br><span class="line"> 6) &quot;key2423&quot;</span><br><span class="line"> 7) &quot;key2476&quot;</span><br><span class="line"> 8) &quot;key2428&quot;</span><br><span class="line"> 9) &quot;key2493&quot;</span><br><span class="line"> 10) &quot;key2420&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 818 match key24* count 1000</span><br><span class="line">1) &quot;9190&quot;</span><br><span class="line">2) 1) &quot;key2402&quot;</span><br><span class="line"> 2) &quot;key2415&quot;</span><br><span class="line"> 3) &quot;key2429&quot;</span><br><span class="line"> 4) &quot;key2424&quot;</span><br><span class="line"> 5) &quot;key2425&quot;</span><br><span class="line"> 6) &quot;key2400&quot;</span><br><span class="line"> 7) &quot;key2472&quot;</span><br><span class="line"> 8) &quot;key2479&quot;</span><br><span class="line"> 9) &quot;key2448&quot;</span><br><span class="line"> 10) &quot;key245&quot;</span><br><span class="line"> 11) &quot;key2487&quot;</span><br><span class="line"> 12) &quot;key2430&quot;</span><br><span class="line"> 13) &quot;key2405&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 9190 match key24* count 1000</span><br><span class="line">1) &quot;12161&quot;</span><br><span class="line">2) 1) &quot;key2488&quot;</span><br><span class="line"> 2) &quot;key2437&quot;</span><br><span class="line"> 3) &quot;key2404&quot;</span><br><span class="line"> 4) &quot;key2440&quot;</span><br><span class="line"> 5) &quot;key2461&quot;</span><br><span class="line"> 6) &quot;key2416&quot;</span><br><span class="line"> 7) &quot;key2436&quot;</span><br><span class="line"> 8) &quot;key2403&quot;</span><br><span class="line"> 9) &quot;key2460&quot;</span><br><span class="line"> 10) &quot;key2452&quot;</span><br><span class="line"> 11) &quot;key2449&quot;</span><br><span class="line"> 12) &quot;key2482&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 12161 match key24* count 1000</span><br><span class="line">1) &quot;11993&quot;</span><br><span class="line">2) 1) &quot;key2483&quot;</span><br><span class="line"> 2) &quot;key2491&quot;</span><br><span class="line"> 3) &quot;key242&quot;</span><br><span class="line"> 4) &quot;key2466&quot;</span><br><span class="line"> 5) &quot;key2446&quot;</span><br><span class="line"> 6) &quot;key2465&quot;</span><br><span class="line"> 7) &quot;key243&quot;</span><br><span class="line"> 8) &quot;key2438&quot;</span><br><span class="line"> 9) &quot;key2457&quot;</span><br><span class="line"> 10) &quot;key246&quot;</span><br><span class="line"> 11) &quot;key2422&quot;</span><br><span class="line"> 12) &quot;key2418&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 11993 match key24* count 1000</span><br><span class="line">1) &quot;7853&quot;</span><br><span class="line">2) 1) &quot;key2498&quot;</span><br><span class="line"> 2) &quot;key2451&quot;</span><br><span class="line"> 3) &quot;key2439&quot;</span><br><span class="line"> 4) &quot;key2495&quot;</span><br><span class="line"> 5) &quot;key2408&quot;</span><br><span class="line"> 6) &quot;key2410&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 7853 match key24* count 1000</span><br><span class="line">1) &quot;5875&quot;</span><br><span class="line">2) 1) &quot;key2486&quot;</span><br><span class="line"> 2) &quot;key2490&quot;</span><br><span class="line"> 3) &quot;key244&quot;</span><br><span class="line"> 4) &quot;key2401&quot;</span><br><span class="line"> 5) &quot;key2463&quot;</span><br><span class="line"> 6) &quot;key2481&quot;</span><br><span class="line"> 7) &quot;key2477&quot;</span><br><span class="line"> 8) &quot;key2468&quot;</span><br><span class="line"> 9) &quot;key2433&quot;</span><br><span class="line"> 10) &quot;key2489&quot;</span><br><span class="line"> 11) &quot;key2455&quot;</span><br><span class="line"> 12) &quot;key2426&quot;</span><br><span class="line"> 13) &quot;key24&quot;</span><br><span class="line"> 14) &quot;key2450&quot;</span><br><span class="line"> 15) &quot;key2414&quot;</span><br><span class="line"> 16) &quot;key2442&quot;</span><br><span class="line"> 17) &quot;key2473&quot;</span><br><span class="line"> 18) &quot;key2467&quot;</span><br><span class="line"> 19) &quot;key2469&quot;</span><br><span class="line"> 20) &quot;key2456&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 5875 match key24* count 1000</span><br><span class="line">1) &quot;14311&quot;</span><br><span class="line">2) 1) &quot;key2453&quot;</span><br><span class="line"> 2) &quot;key2492&quot;</span><br><span class="line"> 3) &quot;key2480&quot;</span><br><span class="line"> 4) &quot;key2427&quot;</span><br><span class="line"> 5) &quot;key2443&quot;</span><br><span class="line"> 6) &quot;key2417&quot;</span><br><span class="line"> 7) &quot;key2432&quot;</span><br><span class="line"> 8) &quot;key240&quot;</span><br><span class="line"> 9) &quot;key2445&quot;</span><br><span class="line"> 10) &quot;key2484&quot;</span><br><span class="line"> 11) &quot;key2444&quot;</span><br><span class="line"> 12) &quot;key247&quot;</span><br><span class="line"> 13) &quot;key2485&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 14311 match key24* count 1000</span><br><span class="line">1) &quot;16383&quot;</span><br><span class="line">2) 1) &quot;key2441&quot;</span><br><span class="line"> 2) &quot;key2474&quot;</span><br><span class="line"> 3) &quot;key2447&quot;</span><br><span class="line"> 4) &quot;key2471&quot;</span><br><span class="line"> 5) &quot;key2470&quot;</span><br><span class="line"> 6) &quot;key2464&quot;</span><br><span class="line"> 7) &quot;key2412&quot;</span><br><span class="line"> 8) &quot;key2419&quot;</span><br><span class="line"> 9) &quot;key2499&quot;</span><br><span class="line"> 10) &quot;key2496&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 16383 match key24* count 1000</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) (empty list or set)</span><br></pre></td></tr></table></figure><h5 id="关于游标"><a href="#关于游标" class="headerlink" title="关于游标"></a>关于游标</h5><p>redis的底层数据结构使用了hash来实现，与java的hashMap类似，也就是数组+链表</p><ul><li>scan命令就是对这个一维数组进行遍历</li><li>每次返回的游标值也都是这个数组的索引</li><li>游标是几表示从数组的索引几开始遍历</li><li>limit参数表示遍历多少个数组的元素，将这些元素下挂接的符合条件的结果都返回，因为每个元素下挂接的链表大小不同，所以每次返回的结果数量也就不同。</li></ul><h5 id="游标的计算"><a href="#游标的计算" class="headerlink" title="游标的计算"></a>游标的计算</h5><ul><li>从0开始</li><li>第二次返回下一次返回数组容量大小的二进制数的高位加一的数，如<br>redis数组容量为2的10次方2&lt;&lt;10，对于这个数的二进制数进行高位加一，来得到游标</li><li>第三次返回的游标是第二次得到的游标值进行二进制数的高位加一，以此类推，直到返回0</li></ul><p>高位加一的原因是考虑遍历时发生字典扩容与缩容的情况（我也不太清楚。。。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;keys命令&quot;&gt;&lt;a href=&quot;#keys命令&quot; class=&quot;headerlink&quot; title=&quot;keys命令&quot;&gt;&lt;/a&gt;keys命令&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>大数据量分页查询优化</title>
    <link href="http://yoursite.com/2019/07/23/mysql%E5%8D%95%E8%A1%A8%E5%8E%86%E5%8F%B2%E8%A1%A8%E6%95%B0%E6%8D%AE%E9%87%8F%E5%BE%88%E5%A4%A7%EF%BC%8C%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/07/23/mysql单表历史表数据量很大，分页查询优化/</id>
    <published>2019-07-23T13:39:30.709Z</published>
    <updated>2019-07-23T13:39:25.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在公司的历史数据表中，数据量很大，上了百万级别。使用常规的分页查询，不能达到理想的效果，今天在公司测试时，测试结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from cust_order</span><br></pre></td></tr></table></figure><ul><li>数据量：3000000以上</li><li>花费时间：6845ms</li></ul><h3 id="常规分页查询测试"><a href="#常规分页查询测试" class="headerlink" title="常规分页查询测试"></a>常规分页查询测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from cust_order where order_type=5 limit 50000,100</span><br></pre></td></tr></table></figure><p>默认按主键id排序，且id为自增</p><h5 id="记录行的偏移量为50000"><a href="#记录行的偏移量为50000" class="headerlink" title="记录行的偏移量为50000"></a>记录行的偏移量为50000</h5><ul><li>花费时间2786ms</li></ul><h5 id="记录行的偏移量为500000"><a href="#记录行的偏移量为500000" class="headerlink" title="记录行的偏移量为500000"></a>记录行的偏移量为500000</h5><ul><li>花费时间5980ms</li></ul><h5 id="记录行的偏移量为2000000"><a href="#记录行的偏移量为2000000" class="headerlink" title="记录行的偏移量为2000000"></a>记录行的偏移量为2000000</h5><ul><li>花费时间15560ms</li></ul><h5 id="结论：常规分页查询默认从第一行开始扫描，偏移量越大，查询数据越慢"><a href="#结论：常规分页查询默认从第一行开始扫描，偏移量越大，查询数据越慢" class="headerlink" title="结论：常规分页查询默认从第一行开始扫描，偏移量越大，查询数据越慢"></a>结论：常规分页查询默认从第一行开始扫描，偏移量越大，查询数据越慢</h5><h3 id="限定id的起始值优化"><a href="#限定id的起始值优化" class="headerlink" title="限定id的起始值优化"></a>限定id的起始值优化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from cust_order where order_type=5 and id&gt;=500000 limit 100</span><br></pre></td></tr></table></figure><ul><li>花费时间11ms</li></ul><h3 id="思考：假如id不是连续自增，如数据有缺失，how-to-do，待更新"><a href="#思考：假如id不是连续自增，如数据有缺失，how-to-do，待更新" class="headerlink" title="思考：假如id不是连续自增，如数据有缺失，how to do，待更新"></a>思考：假如id不是连续自增，如数据有缺失，how to do，待更新</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在公司的历史数据表中，数据量很大，上了百万级别。使用常规的分页查询，不能达到理想的效果，今天在公司测试时，测试结果如下&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>类加载机制</title>
    <link href="http://yoursite.com/2019/07/14/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/07/14/类加载机制/</id>
    <published>2019-07-14T15:29:27.927Z</published>
    <updated>2019-07-14T15:33:46.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JVM类加载机制分为五个部分"><a href="#JVM类加载机制分为五个部分" class="headerlink" title="JVM类加载机制分为五个部分"></a>JVM类加载机制分为五个部分</h3><ul><li>加载</li><li>验证</li><li>准备</li><li>解析</li><li>初始化</li></ul><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的入口</p><ul><li>从一个Class文件获取</li><li>以从ZIP包中读取（比如从jar包和war包中读取）</li><li>在运行时计算生成（动态代理）</li><li>其它文件生成（比如将JSP文件转换成对应的Class类）</li></ul><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>类变量分配内存并设置类变量的初始值阶段,即在方法区中分配这些变量所使用的内存空间<br>如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#将a初始值赋值0</span><br><span class="line">static int a = 999;</span><br><span class="line">#将b赋值为1000</span><br><span class="line">static final int b = 1000;</span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是class文件中的：</p><ul><li>CONSTANT_Class_info</li><li>CONSTANT_Field_info</li><li>CONSTANT_Method_info</li></ul><p>等类型的常量(不属于本类)。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由JVM主导。到了初始阶段，才开始真正执行类中定义的Java程序代码。</p><p>初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。p.s: 如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。</client></client></client></client></client></p><p>注意以下几种情况不会执行类初始化：</p><ul><li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li><li>定义对象数组，不会触发该类的初始化。</li><li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</li><li>通过类名获取Class对象，不会触发类的初始化。</li><li>通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初- - 始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</li><li>通过ClassLoader默认的loadClass方法，也不会触发初始化动作。</li></ul><hr><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>虚拟机设计团队把加载动作放到JVM外部实现，以便让应用程序决定如何获取所需的类，JVM提供了3种类加载器：</p><ul><li>启动类加载器(Bootstrap ClassLoader)：负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。</li><li>扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\lib\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li><li>应用程序类加载器(Application ClassLoader)：负责加载用户路径（classpath）上的类库。</li></ul><p>JVM通过双亲委派模型进行类的加载，当然我们也可以通过继承java.lang.ClassLoader实现自定义的类加载器<br><img src="https://note.youdao.com/yws/public/resource/548599a687fdd90f7974279a1fb3ec03/xmlnote/B31FB777AA1B475E9131A733E08EBC30/9201" alt="image"></p><p>当一个类加载器收到类加载任务，会先交给其父类加载器去完成，因此最终加载任务都会传递到顶层的启动类加载器，只有当父类加载器无法完成加载任务时，才会尝试执行加载任务。</p><p>采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。</p><p>在有些情境中可能会出现要我们自己来实现一个类加载器的需求，由于这里涉及的内容比较广泛，我想以后单独写一篇文章来讲述，不过这里我们还是稍微来看一下。我们直接看一下jdk中的ClassLoader的源码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">protected synchronized Class&lt;?&gt; loadClass(String name, boolean resolve)</span><br><span class="line">        throws ClassNotFoundException &#123;</span><br><span class="line">    // First, check if the class has already been loaded</span><br><span class="line">    Class c = findLoadedClass(name);</span><br><span class="line">    if (c == null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (parent != null) &#123;</span><br><span class="line">                c = parent.loadClass(name, false);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                c = findBootstrapClass0(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            // If still not found, then invoke findClass in order</span><br><span class="line">            // to find the class.</span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (resolve) &#123;</span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先通过Class c = findLoadedClass(name);判断一个类是否已经被加载过。</li><li>如果没有被加载过执行if(c==null)中的程序，遵循双亲委派的模型，首先会通过递归从父加载器开始找，直到父类加载器是Bootstrap ClassLoader为止。</li><li>最后根据resolve的值，判断这个class是否需要解析</li></ul><p>而上面的findClass()的实现如下，直接抛出一个异常，并且方法是protected，很明显这是留给我们开发者自己去实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line">    throw new ClassNotFoundException(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p>Java之所以出现这条机制，因为是处于安全性考虑。害怕用户自己定义class文件然后自己写一个类加载器来加载原本应该是JVM自己加载的类</p><p>一般自定义的Class Loader可以从java.lang.ClassLoader继承，不同classloader加载相同的类，他们在内存也不是相等的，即它们不能互相转换，会直接抛异常</p><p>JVM默认是双亲委托加载机制，即首先判断缓存是否有已加载的类，如果缓存没有，但存在父加载器，则让父加载器加载，如果不存在父加载器，则让Bootstrap ClassLoader去加载，如果父类加载失败，则调用本地的findClass方法去加载。（注：如果不想破坏双亲委托机制的类加载方式，自定义的classloader应该重写findClass(name)，而不是直接重写loadClass）</p><p>各个ClassLoader加载相同的类后，他们是不互等的，这个当涉及多个ClassLoader，并且有通过当前线程上线文获取ClassLoader后转换特别需要注意，可以通过线程的setContextClassLoader设置一个ClassLoader线程上下文，然后再通过Thread.currentThread().getContextClassLoader()获取当前线程保存的Classloader。但是自定义的类文件，放到Bootstrap<br> ClassLoader加载目录，是不会被Bootstrap ClassLoader加载的，因为作为启动类加载器，它不会加载自己不熟悉的jar包的，并且类文件必须打包成jar包放到加载器加载的根目录，才可能被扩展类加载器所加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">public class TestClassLoader extends ClassLoader &#123;</span><br><span class="line"></span><br><span class="line">//定义文件所在目录</span><br><span class="line"></span><br><span class="line">    private static final String DEAFAULTDIR=&quot;E:\\MyProjects\\workspace\\TestConsole\\bin\\&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        byte[] b = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">             b = loadClassData(GetClassName(name));</span><br><span class="line"></span><br><span class="line">        &#125;catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return defineClass(name, b, 0, b.length);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"></span><br><span class="line">protected synchronized Class&lt;?&gt; loadClass(String name,boolean resolve) throws ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">if(name.startsWith(&quot;java.&quot;))&#123;try</span><br><span class="line"> &#123;</span><br><span class="line">            return</span><br><span class="line">super.loadClass(name,</span><br><span class="line">false);    </span><br><span class="line">        &#125;</span><br><span class="line">catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();  </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">byte[] b =</span><br><span class="line">null;  </span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">try &#123;  </span><br><span class="line"></span><br><span class="line">           b = loadClassData(GetClassName(name));  </span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">catch (Exception e) &#123;  </span><br><span class="line"></span><br><span class="line">           e.printStackTrace();  </span><br><span class="line"></span><br><span class="line">       &#125; </span><br><span class="line">      </span><br><span class="line">return defineClass(name, b, 0, b.length);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">private</span><br><span class="line">byte[] loadClassData(String filepath)</span><br><span class="line">throws Exception &#123;  </span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">int n =0;  </span><br><span class="line"></span><br><span class="line">        BufferedInputStream br =</span><br><span class="line">new BufferedInputStream(  </span><br><span class="line"></span><br><span class="line">                       </span><br><span class="line">new FileInputStream(  </span><br><span class="line"></span><br><span class="line">                   </span><br><span class="line">new File(filepath)));  </span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos=</span><br><span class="line">new ByteArrayOutputStream();  </span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">while((n=br.read())!=-1)&#123;  </span><br><span class="line"></span><br><span class="line">                bos.write(n);  </span><br><span class="line"></span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            br.close();  </span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">return bos.toByteArray();  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">public</span><br><span class="line">static String GetClassName(String name)&#123;</span><br><span class="line">       </span><br><span class="line">return</span><br><span class="line">DEAFAULTDIR+name.replace(&apos;.&apos;,&apos;/&apos;)+&quot;.class&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JVM类加载机制分为五个部分&quot;&gt;&lt;a href=&quot;#JVM类加载机制分为五个部分&quot; class=&quot;headerlink&quot; title=&quot;JVM类加载机制分为五个部分&quot;&gt;&lt;/a&gt;JVM类加载机制分为五个部分&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;加载&lt;/li&gt;
&lt;li&gt;验证&lt;/
      
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
  </entry>
  
</feed>
